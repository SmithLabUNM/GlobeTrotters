length(unique(df$binomial[df$n.cont == 3 | df$n.cont == 4])) #16
unique(df[which(df$n.cont == 3 | df$n.cont == 4), "binomial"])
281/4176
(281/4176)*100
(6/4176)*100
n.df <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
n.cont = n.cont[1],
percent = (length(unique(binomial))/length(unique(df$binomial)))*100)
n.df.fam <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100)
n.df.fam
n.df.ord <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100)
## TEST: What are the proportion of mammal species?----
#n per family
n.df <- df %>%
group_by(order) %>%
summarise(n = length(unique(binomial)),
n.cont.org = length(unique(n.cont)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100)
n.df
## TEST: What are the proportion of mammal species?----
#n per order
n.df <- df %>%
group_by(order) %>%
summarise(n = length(unique(binomial)),
n.cont.org = length(unique(n.cont)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100) %>%
as.data.frame()
n.df.ord <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100) %>%
as.data.frame()
colnames(n.df.ord.)
colnames(n.df.ord)
## TEST: What are the proportion of mammal species?----
#n per order
n.df <- df %>%
group_by(order) %>%
summarise(n.order = length(unique(binomial)),
n.cont.order = length(unique(n.cont)),
percent.order = (length(unique(binomial))/length(unique(df$binomial)))*100) %>%
as.data.frame()
n.df.ord <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100) %>%
as.data.frame()
n.df.ord
colnames(n.df.ord)
n.df.ord.long <- melt(data = n.df.ord, id.vars = 1, variable.name = "n.cont")
head(n.df.ord.long )
n.df.ord.long <- melt(data = n.df.ord, id.vars = 1, variable.name = c("n.cont", "n", "percent"))
n.df.ord.long <- melt(data = n.df.ord, id.vars = 1:2, variable.name = "n"))
n.df.ord.long <- melt(data = n.df.ord, id.vars = 1:2, variable.name = "n")
head(n.df.ord.long )
n.df.order <- cbind(n.df, n.df.order)
n.df.order <- cbind(n.df, n.df.ord)
n.df.tot <- merge(n.df, n.df.ord, by = "oder", all.y = TRUE)
## TEST: What are the proportion of mammal species?----
#n per order
n.df <- df %>%
group_by(order) %>%
summarise(n.order = length(unique(binomial)),
n.cont.order = length(unique(n.cont)),
percent.order = (length(unique(binomial))/length(unique(df$binomial)))*100) %>%
as.data.frame()
n.df.ord <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
percent = (length(unique(binomial))/length(unique(df$binomial)))*100) %>%
as.data.frame()
colnames(n.df.ord )
colnames(n.df)
n.df.tot <- merge(n.df, n.df.ord, by = "order", all.y = TRUE)
nrow(n.df.ord )
nrow(n.df)
nrow(n.df.tot )
#compare % on # of continents to global %
n.df.tot$per.diff <- n.df.tot$percent.order - n.df.tot$percent
n.df.tot$per.diff
n.df.tot$order[43]
n.df.tot[43,]
n.df <- df
n.df <- data.frame()
n.df$order <- unique(df$order)
n.df <- data.frame()
n.df$order <- unique(df$order)
unique(df$order)
n.df$order
n.df <- df %>%
n.df <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
n.df <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
n.df <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial)),
n.tot = length(unique(df$binomial))) %>%
as.data.frame()
n.df
#baseline for order
n.df <- df %>%
group_by(order) %>%
summarise(n = length(unique(binomial)),
n.cont = length(unique(n.cont)))
n.df
#baseline for order
n.df <- df %>%
group_by(order) %>%
summarise(n.tot = length(unique(binomial)),
n.cont.tot = length(unique(n.cont))) %>%
as.data.frame()
n.df.per <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
n.df.per
merge(n.df, n.df.per, by = "order", all.y = TRUE)
df.orders <- merge(n.df, n.df.per, by = "order", all.y = TRUE)
df.order$per.tot <- df.order$n.tot/length(unique(df$binomial))
#baseline for order
n.df <- df %>%
group_by(order) %>%
summarise(n.tot = length(unique(binomial)),
n.cont.tot = length(unique(n.cont)),
per.tot = length(unique(binomial))/length(unique(df$binomial))) %>%
as.data.frame()
n.df.per <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
df.orders <- merge(n.df, n.df.per, by = "order", all.y = TRUE)
colnames(df.orders )
df.orderw$per.2 <- df.orders$n/sum(df.orders$n[df.orders$n.cont == 1])
df.orderw$per.1 <- df.orders$n/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$per.2 <- df.orders$n/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$per.1 <- df.orders$n/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$per.3.4 <- df.orders$n/sum(df.orders$n[df.orders$n.cont >= 3])
df.orders$per.1 <- df.orders$n/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$per.2 <- df.orders$n/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$per.3.4 <- df.orders$n/sum(df.orders$n[df.orders$n.cont >= 3])
df.orders$per.1
df.orders$comp.2 <- df.orders$per.2 - df.orders$per.tot
df.orders$comp.3.4 <- df.orders$per.3.4 - df.orders$per.tot
View(df.orders)
df.orders$per.1 <- df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$per.2 <- df.orders$n[df.orders$n.cont == 2]/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$per.3.4 <- df.orders$n[df.orders$n.cont >= 3]/sum(df.orders$n[df.orders$n.cont >= 3])
df.orders$comp.2 <- df.orders$per.2 - df.orders$per.tot
df.orders$comp.3.4 <- df.orders$per.3.4 - df.orders$per.tot
df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$n[df.orders$n.cont == 2]/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$n[df.orders$n.cont >= 3]/sum(df.orders$n[df.orders$n.cont >= 3])
df.orders$per.1 <- df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$per.1[df.orders$n.cont == 1] <- df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$per.2[df.orders$n.cont == 2] <- df.orders$n[df.orders$n.cont == 2]/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$per.3.4[df.orders$n.cont >= 3] <- df.orders$n[df.orders$n.cont >= 3]/sum(df.orders$n[df.orders$n.cont >= 3])
df.orders$comp.2[df.orders$n.cont == 2]  <- df.orders$per.2 - df.orders$per.tot
df.orders$comp.3.4[df.orders$n.cont >= 3] <- df.orders$per.3.4 - df.orders$per.tot
df.orders$per.3.4
colnames(df.orders)
df.orders$comp.2[df.orders$n.cont == 2]  <- df.orders$per.2 - df.orders$per.tot
df.orders$comp.3.4[df.orders$n.cont >= 3] <- df.orders$per.3.4 - df.orders$per.tot
df.orders$comp.2[df.orders$n.cont == 2]  <- df.orders$per.2[df.orders$n.cont == 2] - df.orders$per.tot[df.orders$n.cont == 2]
df.orders$comp.3.4[df.orders$n.cont >= 3] <- df.orders$per.3.4[df.orders$n.cont >= 3] - df.orders$per.tot[df.orders$n.cont >= 3]
View(df.orders)
#baseline for order
n.df <- df %>%
group_by(order) %>%
summarise(n.tot = length(unique(binomial)),
n.cont.tot = length(unique(n.cont)),
per.tot = length(unique(binomial))/length(unique(df$binomial))) %>%
as.data.frame()
n.df.per <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
df.orders <- merge(n.df, n.df.per, by = "order", all.y = TRUE)
df.orders$per.1[df.orders$n.cont == 1] <- df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])
df.orders$per.2[df.orders$n.cont == 2] <- df.orders$n[df.orders$n.cont == 2]/sum(df.orders$n[df.orders$n.cont == 2])
df.orders$per.3.4[df.orders$n.cont >= 3] <- df.orders$n[df.orders$n.cont >= 3]/sum(df.orders$n[df.orders$n.cont >= 3])
df.orders$comp.2[df.orders$n.cont == 2]  <- df.orders$per.2[df.orders$n.cont == 2] - df.orders$per.tot[df.orders$n.cont == 2]
df.orders$comp.3.4[df.orders$n.cont >= 3] <- df.orders$per.3.4[df.orders$n.cont >= 3] - df.orders$per.tot[df.orders$n.cont >= 3]
View(df.orders)
#which orders are over or under represented on 2 or 3+ continents?
df.orders$comp.2
#which orders are over or under represented on 2 or 3+ continents?
min(df.orders$comp.2, na.rm = TRUE)
max(df.orders$comp.2, na.rm = TRUE)
min(df.orders$comp.3.4, na.rm = TRUE)
max(df.orders$comp.3.4, na.rm = TRUE)
df.orders$per.1[df.orders$n.cont == 1] <- (df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])) * 100
df.orders$per.2[df.orders$n.cont == 2] <- (df.orders$n[df.orders$n.cont == 2]/sum(df.orders$n[df.orders$n.cont == 2])) * 100
df.orders$per.3.4[df.orders$n.cont >= 3] <- (df.orders$n[df.orders$n.cont >= 3]/sum(df.orders$n[df.orders$n.cont >= 3])) * 100
df.orders$comp.2[df.orders$n.cont == 2]  <- df.orders$per.2[df.orders$n.cont == 2] - df.orders$per.tot[df.orders$n.cont == 2]
df.orders$comp.3.4[df.orders$n.cont >= 3] <- df.orders$per.3.4[df.orders$n.cont >= 3] - df.orders$per.tot[df.orders$n.cont >= 3]
#baseline for order
n.df <- df %>%
group_by(order) %>%
summarise(n.tot = length(unique(binomial)),
n.cont.tot = length(unique(n.cont)),
per.tot = length(unique(binomial))/length(unique(df$binomial))) %>%
as.data.frame()
n.df.per <- df %>%
group_by(order, n.cont) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
df.orders <- merge(n.df, n.df.per, by = "order", all.y = TRUE)
df.orders$per.1[df.orders$n.cont == 1] <- (df.orders$n[df.orders$n.cont == 1]/sum(df.orders$n[df.orders$n.cont == 1])) * 100
df.orders$per.2[df.orders$n.cont == 2] <- (df.orders$n[df.orders$n.cont == 2]/sum(df.orders$n[df.orders$n.cont == 2])) * 100
df.orders$per.3.4[df.orders$n.cont >= 3] <- (df.orders$n[df.orders$n.cont >= 3]/sum(df.orders$n[df.orders$n.cont >= 3])) * 100
df.orders$comp.2[df.orders$n.cont == 2]  <- df.orders$per.2[df.orders$n.cont == 2] - df.orders$per.tot[df.orders$n.cont == 2]
df.orders$comp.3.4[df.orders$n.cont >= 3] <- df.orders$per.3.4[df.orders$n.cont >= 3] - df.orders$per.tot[df.orders$n.cont >= 3]
View(df.orders)
#which orders are over or under represented on 2 or 3+ continents?
min(df.orders$comp.2, na.rm = TRUE) #-0.29%; likely not sig
max(df.orders$comp.2, na.rm = TRUE) #0.38%; likely not sig
min(df.orders$comp.3.4, na.rm = TRUE) #-0.01; likely not sig
max(df.orders$comp.3.4, na.rm = TRUE) #0.44%
which.max(df.orders$comp.2)
df.orders[10,]
#which orders are over or under represented on 2 or 3+ continents?
sort(df.orders$comp.2)
df.orders$order[df.orders$comp.2 > 10]
sort(df.orders$comp.3.4)
which.min(df.orders$comp.3.4)
df.orders[11,]
which.max(df.orders$comp.3.4)
df.orders[7,]
df.orders[df.orders$comp.3.4 > 1]
df.orders[df.orders$comp.3.4 > 1,]
df.orders$order[df.orders$comp.3.4 > 1,]
df.orders$order[df.orders$comp.3.4 > 1]
#about the spp on 2 continents
two.cont <- subset(df, df$n.cont == 2)
two.cont %>%
group_by(order) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame
two.cont %>%
group_by(order) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame
two.cont %>%
group_by(order) %>%
summarise(n = length(unique(binomial))) %>%
as.data.frame()
length(unique(two.cont$order)) #14
length(unique(two.cont$family)) #54
length(unique(two.cont$genus)) #175
length(unique(two.cont$binomial)) #272
df$n.cont[df$n.cont == 4] <- "3+"
df$n.cont[df$n.cont == 3] <- "3+"
df$n.cont <- as.factor(data$n.cont)
df$n.cont <- as.factor(df$n.cont)
## calculate sørensen index
sorensen <- function(x,y) {
index = (2*(length(intersect(x, y))))/(length(x) + length(y))
return(index)
}
continents <- c("North.America", "South.America", "Eurasia", "Africa", "Australia")
indeces <- matrix(nrow = 5, ncol = 5, dimnames = list(continents, continents))
indeces[1,2] <- sorensen(x = data$binomial[data$continent == "North.America"],
y = data$binomial[data$continent == "South.America"])
indeces[1,3] <- sorensen(x = data$binomial[data$continent == "North.America"],
y = data$binomial[data$continent == "Eurasia"])
continents <- c("North.America", "South.America", "Eurasia", "Africa", "Australia")
indeces <- matrix(nrow = 5, ncol = 5, dimnames = list(continents, continents))
indeces[1,2] <- sorensen(x = df$binomial[df$continent == "North.America"],
y = df$binomial[df$continent == "South.America"])
indeces[1,3] <- sorensen(x = df$binomial[df$continent == "North.America"],
y = df$binomial[df$continent == "Eurasia"])
indeces[1,4] <- sorensen(x = df$binomial[df$continent == "North.America"],
y = df$binomial[df$continent == "Africa"])
indeces[1,5] <- sorensen(x = df$binomial[df$continent == "North.America"],
y = df$binomial[df$continent == "Australia"])
indeces[2, 3] <- sorensen(x = df$binomial[df$continent == "South.America"],
y = df$binomial[df$continent == "Eurasia"])
indeces[2,4] <- sorensen(x = df$binomial[df$continent == "South.America"],
y = df$binomial[df$continent == "Africa"])
indeces[2,5] <- sorensen(x = df$binomial[df$continent == "South.America"],
y = df$binomial[df$continent == "Australia"])
indeces[3,4] <- sorensen(x = df$binomial[df$continent == "Eurasia"],
y = df$binomial[df$continent == "Africa"])
indeces[3,5] <- sorensen(x = df$binomial[df$continent == "Eurasia"],
y = df$binomial[df$continent == "Australia"])
indeces[4,5] <- sorensen(x = df$binomial[df$continent == "Africa"],
y = df$binomial[df$continent == "Australia"])
write.csv(indeces, "sorensen.index.csv")
#H2 spp that come from diverse grps are on more continents
df.noDupe <- filter(df, !duplicated(binomial))
length(unique(df.noDupe$family)) #135
length(unique(df.noDupe$family[df.noDupe$n.cont == 1])) #132
length(unique(df.noDupe$family[df.noDupe$n.cont == 2])) #54
length(unique(df.noDupe$family[df.noDupe$n.cont == "3+"])) #6
length(unique(df.noDupe$order)) #140
length(unique(df.noDupe$order[df.noDupe$n.cont == 1])) #136
length(unique(df.noDupe$order[df.noDupe$n.cont == 2])) #57
length(unique(df.noDupe$order[df.noDupe$n.cont == "3+"])) #6
length(unique(df.noDupe$order)) #30
length(unique(df.noDupe$order[df.noDupe$n.cont == 1])) #30
nrow(df.noDupe)
length(unique(df$binomial))
length(unique(df$order))
length(unique(df$order[df$n.cont == 1]))
unique(df$order[df$n.cont == 1])
unique(df$order[df$n.cont == 2])
unique(df$order[df$n.cont == "3+"])
#H2 spp that come from diverse grps are on more continents
one.cont <- df[df$n.cont == 1, ]
length(one.cont$binomial)
length(unique(one.cont$binomial))
length(unique(df$family)) #140]
length(unique(one.cont$family)) #136
lenth(unique(one.cont$order))
length(unique(one.cont$order))
two.cont <- df[df$n.cont == 2,]
mult.cont <- df[df$n.cont == "3+"]
length(unique(two.cont$family)) #57
length(unique(two.cont$order)) #6
mult.cont <- df[df$n.cont == "3+",]
length(unique(df.noDupe$order)) #30
mult.cont <- df[df$n.cont == "3+",]
length(unique(mult.cont$family))
length(unique(mult.cont$order))
df$global <- df$n.cont == 2
df$global
# Create a data frame with all species
res <- data.frame(family = unique(df$family))
# Create a dataframe with famlies and count how many species are in each family
res0 <- df %>%
group_by(family) %>%
dplyr::summarise(count = n())
# Create a dataframe with global famlies and count how many species are global
res1 <- filter(df, global) %>%
group_by(family) %>%
dplyr::summarise(onMult = n())
# Merge the data
res <- left_join(res, res0, by = "family") %>%
left_join(res1, by = "family")
# Change NA's to zero
res[is.na(res)] <- 0
# Count how large a proportion we expect of a given family
res <- mutate(res, glob.proportion = count/sum(count))
# Find the total species number on 2+ continents
onMult.tot <- sum(res$onMult)
res <- mutate(res, onMult.proportion = onMult/onMult.tot)
# Run binomial test and add that to the result
# The test compares each familys presence globally to their overall precense in mammalia
res <- purrrlyr::invoke_rows(.d = res,
.f = function(onMult, glob.proportion, ...) {
test <- binom.test(onMult, onMult.tot, p = glob.proportion, alternative="greater")
c(p.val = as.numeric(test$p.value))
},
.collate = "cols", .to = c("p.value"))
# Find which ones are signifcicant
# And which ones are signifcant bonferoni-corrected since we run many tests
# And 3 other stronger types of corrections which give the same results
res <- arrange(res, p.value) %>% mutate(signif = p.value < 0.05,
signif.bonferoni = p.value < 0.05/n(),
signif.holm = !0.05/(n() + 1 - 1:n()) < p.value,
signif.sidak = p.value < 1 - (1 - 0.05)^(1/n()),
signif.holm.sidak = !(1 - (1 - 0.05)^(1/n())) < p.value)
# Look at the significants
filter(res, signif)
write.csv(res, "onecontvmult.fams.csv", row.names = FALSE)
####1+2 v 3+####
df$global <- df$n.cont == "3+"
# Create a data frame with all species
res <- data.frame(family = unique(df$family))
# Create a dataframe with famlies and count how many species are in each family
res0 <- df %>%
group_by(family) %>%
dplyr::summarise(count = n())
# Create a dataframe with global famlies and count how many species are global
res1 <- filter(df, global) %>%
group_by(family) %>%
dplyr::summarise(on3 = n())
# Merge the data
res <- left_join(res, res0, by = "family") %>%
left_join(res1, by = "family")
# Change NA's to zero
res[is.na(res)] <- 0
# Count how large a proportion we expect of a given family
res <- mutate(res, glob.proportion = count/sum(count))
# Find the total species number on 2+ continents
on3.tot <- sum(res$on3)
res <- mutate(res, on3.proportion = on3/on3.tot)
# Run binomial test and add that to the result
# The test compares each familys presence globally to their overall precense in mammalia
res <- purrrlyr::invoke_rows(.d = res,
.f = function(on3, glob.proportion, ...) {
test <- binom.test(on3, on3.tot, p = glob.proportion, alternative="greater")
c(p.val = as.numeric(test$p.value))
},
.collate = "cols", .to = c("p.value"))
# Find which ones are signifcicant
# And which ones are signifcant bonferoni-corrected since we run many tests
# And 3 other stronger types of corrections which give the same results
res <- arrange(res, p.value) %>% mutate(signif = p.value < 0.05,
signif.bonferoni = p.value < 0.05/n(),
signif.holm = !0.05/(n() + 1 - 1:n()) < p.value,
signif.sidak = p.value < 1 - (1 - 0.05)^(1/n()),
signif.holm.sidak = !(1 - (1 - 0.05)^(1/n())) < p.value)
# Look at the significants
filter(res, signif)
write.csv(res, "onetwocontvthree.fams.csv", row.names = FALSE)
write.csv(res, "onecontvtwo.fams.csv", row.names = FALSE)
df$global <- df$n.cont == 2
df$global <- df$n.cont == 2
# Create a data frame with all species
res <- data.frame(order = unique(df$order))
res
# Create a dataframe with famlies and count how many species are in each family
res0 <- df %>%
group_by(order) %>%
dplyr::summarise(count = n())
res0
# Create a dataframe with global famlies and count how many species are global
res1 <- filter(df, global) %>%
group_by(order) %>%
dplyr::summarise(onMult = n())
global
# Create a dataframe with global orders and count how many species are global
res1 <- filter(df, global) %>%
group_by(order) %>%
dplyr::summarise(onMult = n())
res1
# Merge the data
res <- left_join(res, res0, by = "order") %>%
left_join(res1, by = "order")
# Change NA's to zero
res[is.na(res)] <- 0
# Count how large a proportion we expect of a given family
res <- mutate(res, glob.proportion = count/sum(count))
# Find the total species number on 2+ continents
onMult.tot <- sum(res$onMult)
res <- mutate(res, onMult.proportion = onMult/onMult.tot)
# Run binomial test and add that to the result
# The test compares each familys presence globally to their overall precense in mammalia
res <- purrrlyr::invoke_rows(.d = res,
.f = function(onMult, glob.proportion, ...) {
test <- binom.test(onMult, onMult.tot, p = glob.proportion, alternative="greater")
c(p.val = as.numeric(test$p.value))
},
.collate = "cols", .to = c("p.value"))
# Find which ones are signifcicant
# And which ones are signifcant bonferoni-corrected since we run many tests
# And 3 other stronger types of corrections which give the same results
res <- arrange(res, p.value) %>% mutate(signif = p.value < 0.05,
signif.bonferoni = p.value < 0.05/n(),
signif.holm = !0.05/(n() + 1 - 1:n()) < p.value,
signif.sidak = p.value < 1 - (1 - 0.05)^(1/n()),
signif.holm.sidak = !(1 - (1 - 0.05)^(1/n())) < p.value)
# Look at the significants
filter(res, signif)
write.csv(res, "onecontvtwo.orders.csv", row.names = FALSE)
####1+2 v 3+####
df$global <- df$n.cont == "3+"
# Create a data frame with all species
res <- data.frame(order = unique(df$order))
# Create a dataframe with famlies and count how many species are in each family
res0 <- df %>%
group_by(order) %>%
dplyr::summarise(count = n())
# Create a dataframe with global famlies and count how many species are global
res1 <- filter(df, global) %>%
group_by(order) %>%
dplyr::summarise(on3 = n())
# Merge the data
res <- left_join(res, res0, by = "order") %>%
left_join(res1, by = "order")
# Change NA's to zero
res[is.na(res)] <- 0
# Count how large a proportion we expect of a given family
res <- mutate(res, glob.proportion = count/sum(count))
# Find the total species number on 2+ continents
on3.tot <- sum(res$on3)
res <- mutate(res, on3.proportion = on3/on3.tot)
# Run binomial test and add that to the result
# The test compares each familys presence globally to their overall precense in mammalia
res <- purrrlyr::invoke_rows(.d = res,
.f = function(on3, glob.proportion, ...) {
test <- binom.test(on3, on3.tot, p = glob.proportion, alternative="greater")
c(p.val = as.numeric(test$p.value))
},
.collate = "cols", .to = c("p.value"))
# Find which ones are signifcicant
# And which ones are signifcant bonferoni-corrected since we run many tests
# And 3 other stronger types of corrections which give the same results
res <- arrange(res, p.value) %>% mutate(signif = p.value < 0.05,
signif.bonferoni = p.value < 0.05/n(),
signif.holm = !0.05/(n() + 1 - 1:n()) < p.value,
signif.sidak = p.value < 1 - (1 - 0.05)^(1/n()),
signif.holm.sidak = !(1 - (1 - 0.05)^(1/n())) < p.value)
# Look at the significants
filter(res, signif)
write.csv(res, "onetwocontvthree.fams.csv", row.names = FALSE)
write.csv(res, "onetwocontvthree.order.csv", row.names = FALSE)
write.csv(res, "onetwocontvthree.orders.csv", row.names = FALSE)
